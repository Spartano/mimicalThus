### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Behavior {
  id: Int
  name: String
  UserBehavior: [UserBehavior]
}

input BehaviorCreateOneWithoutUserBehaviorInput {
  connect: BehaviorWhereUniqueInput
  create: BehaviorCreateWithoutUserBehaviorInput
}

input BehaviorCreateWithoutUserBehaviorInput {
  name: String!
}

input BehaviorWhereUniqueInput {
  id: Int
  name: String
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

scalar DateTime

type Mutation {
  createOneUser(data: UserCreateInput!): User!
  signupUser(email: String!, image: String, name: String!, userBehaviors: [UserBehaviorCreateWithoutUserInput], userPassions: [UserPassionCreateWithoutUserInput]): User
}

type Passion {
  id: Int
  name: String
  UserPassion: [UserPassion]
}

input PassionCreateOneWithoutUserPassionInput {
  connect: PassionWhereUniqueInput
  create: PassionCreateWithoutUserPassionInput
}

input PassionCreateWithoutUserPassionInput {
  name: String!
}

input PassionWhereUniqueInput {
  id: Int
  name: String
}

type Query {
  user(email: String): User
  userCount: Int
  users(searchString: String, skip: Int = 0, take: Int = 5): [User]
}

type User {
  email: String
  id: Int
  image: String
  name: String
  UserBehavior: [UserBehavior]
  UserPassion: [UserPassion]
}

type UserBehavior {
  Behavior: Behavior
  behaviorId: Int
  id: Int
  User: User
  userId: Int
  value: Int
}

input UserBehaviorCreateManyWithoutUserInput {
  connect: [UserBehaviorWhereUniqueInput!]
  create: [UserBehaviorCreateWithoutUserInput!]
}

input UserBehaviorCreateWithoutUserInput {
  Behavior: BehaviorCreateOneWithoutUserBehaviorInput!
  value: Int!
}

input UserBehaviorWhereUniqueInput {
  id: Int
}

input UserCreateInput {
  createdAt: DateTime
  email: String
  emailVerified: DateTime
  image: String
  name: String
  updatedAt: DateTime
  UserBehavior: UserBehaviorCreateManyWithoutUserInput
  UserPassion: UserPassionCreateManyWithoutUserInput
}

type UserPassion {
  id: Int
  Passion: Passion
  passionId: Int
  User: User
  userId: Int
  value: Int
}

input UserPassionCreateManyWithoutUserInput {
  connect: [UserPassionWhereUniqueInput!]
  create: [UserPassionCreateWithoutUserInput!]
}

input UserPassionCreateWithoutUserInput {
  Passion: PassionCreateOneWithoutUserPassionInput!
  value: Int!
}

input UserPassionWhereUniqueInput {
  id: Int
}
