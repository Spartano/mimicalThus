/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import { core } from "@nexus/schema"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    date<FieldName extends string>(fieldName: FieldName, opts?: core.ScalarInputFieldConfig<core.GetGen3<"inputTypes", TypeName, FieldName>>): void // "Date";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Date";
  }
}
declare global {
  interface NexusGenCustomOutputProperties<TypeName extends string> {
    crud: NexusPrisma<TypeName, 'crud'>
    model: NexusPrisma<TypeName, 'model'>
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  BehaviorCreateOneWithoutUserBehaviorInput: { // input type
    connect?: NexusGenInputs['BehaviorWhereUniqueInput'] | null; // BehaviorWhereUniqueInput
    create?: NexusGenInputs['BehaviorCreateWithoutUserBehaviorInput'] | null; // BehaviorCreateWithoutUserBehaviorInput
  }
  BehaviorCreateWithoutUserBehaviorInput: { // input type
    name: string; // String!
  }
  BehaviorWhereUniqueInput: { // input type
    id?: number | null; // Int
    name?: string | null; // String
  }
  PassionCreateOneWithoutUserPassionInput: { // input type
    connect?: NexusGenInputs['PassionWhereUniqueInput'] | null; // PassionWhereUniqueInput
    create?: NexusGenInputs['PassionCreateWithoutUserPassionInput'] | null; // PassionCreateWithoutUserPassionInput
  }
  PassionCreateWithoutUserPassionInput: { // input type
    name: string; // String!
  }
  PassionWhereUniqueInput: { // input type
    id?: number | null; // Int
    name?: string | null; // String
  }
  UserBehaviorCreateManyWithoutUserInput: { // input type
    connect?: NexusGenInputs['UserBehaviorWhereUniqueInput'][] | null; // [UserBehaviorWhereUniqueInput!]
    create?: NexusGenInputs['UserBehaviorCreateWithoutUserInput'][] | null; // [UserBehaviorCreateWithoutUserInput!]
  }
  UserBehaviorCreateWithoutUserInput: { // input type
    Behavior: NexusGenInputs['BehaviorCreateOneWithoutUserBehaviorInput']; // BehaviorCreateOneWithoutUserBehaviorInput!
    value: number; // Int!
  }
  UserBehaviorWhereUniqueInput: { // input type
    id?: number | null; // Int
  }
  UserCreateInput: { // input type
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    email?: string | null; // String
    emailVerified?: NexusGenScalars['DateTime'] | null; // DateTime
    image?: string | null; // String
    name?: string | null; // String
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
    UserBehavior?: NexusGenInputs['UserBehaviorCreateManyWithoutUserInput'] | null; // UserBehaviorCreateManyWithoutUserInput
    UserPassion?: NexusGenInputs['UserPassionCreateManyWithoutUserInput'] | null; // UserPassionCreateManyWithoutUserInput
  }
  UserPassionCreateManyWithoutUserInput: { // input type
    connect?: NexusGenInputs['UserPassionWhereUniqueInput'][] | null; // [UserPassionWhereUniqueInput!]
    create?: NexusGenInputs['UserPassionCreateWithoutUserInput'][] | null; // [UserPassionCreateWithoutUserInput!]
  }
  UserPassionCreateWithoutUserInput: { // input type
    Passion: NexusGenInputs['PassionCreateOneWithoutUserPassionInput']; // PassionCreateOneWithoutUserPassionInput!
    value: number; // Int!
  }
  UserPassionWhereUniqueInput: { // input type
    id?: number | null; // Int
  }
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  Date: any
  DateTime: any
}

export interface NexusGenRootTypes {
  Behavior: { // root type
    id?: number | null; // Int
    name?: string | null; // String
  }
  Mutation: {};
  Passion: { // root type
    id?: number | null; // Int
    name?: string | null; // String
  }
  Query: {};
  User: { // root type
    email?: string | null; // String
    id?: number | null; // Int
    image?: string | null; // String
    name?: string | null; // String
  }
  UserBehavior: { // root type
    behaviorId?: number | null; // Int
    id?: number | null; // Int
    userId?: number | null; // Int
    value?: number | null; // Int
  }
  UserPassion: { // root type
    id?: number | null; // Int
    passionId?: number | null; // Int
    userId?: number | null; // Int
    value?: number | null; // Int
  }
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  BehaviorCreateOneWithoutUserBehaviorInput: NexusGenInputs['BehaviorCreateOneWithoutUserBehaviorInput'];
  BehaviorCreateWithoutUserBehaviorInput: NexusGenInputs['BehaviorCreateWithoutUserBehaviorInput'];
  BehaviorWhereUniqueInput: NexusGenInputs['BehaviorWhereUniqueInput'];
  PassionCreateOneWithoutUserPassionInput: NexusGenInputs['PassionCreateOneWithoutUserPassionInput'];
  PassionCreateWithoutUserPassionInput: NexusGenInputs['PassionCreateWithoutUserPassionInput'];
  PassionWhereUniqueInput: NexusGenInputs['PassionWhereUniqueInput'];
  UserBehaviorCreateManyWithoutUserInput: NexusGenInputs['UserBehaviorCreateManyWithoutUserInput'];
  UserBehaviorCreateWithoutUserInput: NexusGenInputs['UserBehaviorCreateWithoutUserInput'];
  UserBehaviorWhereUniqueInput: NexusGenInputs['UserBehaviorWhereUniqueInput'];
  UserCreateInput: NexusGenInputs['UserCreateInput'];
  UserPassionCreateManyWithoutUserInput: NexusGenInputs['UserPassionCreateManyWithoutUserInput'];
  UserPassionCreateWithoutUserInput: NexusGenInputs['UserPassionCreateWithoutUserInput'];
  UserPassionWhereUniqueInput: NexusGenInputs['UserPassionWhereUniqueInput'];
  String: NexusGenScalars['String'];
  Int: NexusGenScalars['Int'];
  Float: NexusGenScalars['Float'];
  Boolean: NexusGenScalars['Boolean'];
  ID: NexusGenScalars['ID'];
  Date: NexusGenScalars['Date'];
  DateTime: NexusGenScalars['DateTime'];
}

export interface NexusGenFieldTypes {
  Behavior: { // field return type
    id: number | null; // Int
    name: string | null; // String
    UserBehavior: Array<NexusGenRootTypes['UserBehavior'] | null> | null; // [UserBehavior]
  }
  Mutation: { // field return type
    createOneUser: NexusGenRootTypes['User']; // User!
    signupUser: NexusGenRootTypes['User'] | null; // User
  }
  Passion: { // field return type
    id: number | null; // Int
    name: string | null; // String
    UserPassion: Array<NexusGenRootTypes['UserPassion'] | null> | null; // [UserPassion]
  }
  Query: { // field return type
    user: NexusGenRootTypes['User'] | null; // User
    userCount: number | null; // Int
    users: Array<NexusGenRootTypes['User'] | null> | null; // [User]
  }
  User: { // field return type
    email: string | null; // String
    id: number | null; // Int
    image: string | null; // String
    name: string | null; // String
    UserBehavior: Array<NexusGenRootTypes['UserBehavior'] | null> | null; // [UserBehavior]
    UserPassion: Array<NexusGenRootTypes['UserPassion'] | null> | null; // [UserPassion]
  }
  UserBehavior: { // field return type
    Behavior: NexusGenRootTypes['Behavior'] | null; // Behavior
    behaviorId: number | null; // Int
    id: number | null; // Int
    User: NexusGenRootTypes['User'] | null; // User
    userId: number | null; // Int
    value: number | null; // Int
  }
  UserPassion: { // field return type
    id: number | null; // Int
    Passion: NexusGenRootTypes['Passion'] | null; // Passion
    passionId: number | null; // Int
    User: NexusGenRootTypes['User'] | null; // User
    userId: number | null; // Int
    value: number | null; // Int
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createOneUser: { // args
      data: NexusGenInputs['UserCreateInput']; // UserCreateInput!
    }
    signupUser: { // args
      email: string; // String!
      image?: string | null; // String
      name: string; // String!
      userBehaviors?: Array<NexusGenInputs['UserBehaviorCreateWithoutUserInput'] | null> | null; // [UserBehaviorCreateWithoutUserInput]
      userPassions?: Array<NexusGenInputs['UserPassionCreateWithoutUserInput'] | null> | null; // [UserPassionCreateWithoutUserInput]
    }
  }
  Query: {
    user: { // args
      email?: string | null; // String
    }
    users: { // args
      searchString?: string | null; // String
      skip?: number | null; // Int
      take?: number | null; // Int
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "Behavior" | "Mutation" | "Passion" | "Query" | "User" | "UserBehavior" | "UserPassion";

export type NexusGenInputNames = "BehaviorCreateOneWithoutUserBehaviorInput" | "BehaviorCreateWithoutUserBehaviorInput" | "BehaviorWhereUniqueInput" | "PassionCreateOneWithoutUserPassionInput" | "PassionCreateWithoutUserPassionInput" | "PassionWhereUniqueInput" | "UserBehaviorCreateManyWithoutUserInput" | "UserBehaviorCreateWithoutUserInput" | "UserBehaviorWhereUniqueInput" | "UserCreateInput" | "UserPassionCreateManyWithoutUserInput" | "UserPassionCreateWithoutUserInput" | "UserPassionWhereUniqueInput";

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = "Boolean" | "Date" | "DateTime" | "Float" | "ID" | "Int" | "String";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
}